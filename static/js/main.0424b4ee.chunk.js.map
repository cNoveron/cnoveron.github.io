{"version":3,"sources":["assets/diamond.glb","assets/233.jpg","backface-material/index.js","refraction-material/index.js","index.js"],"names":["module","exports","RefractionMaterial","options","vertexShader","fragmentShader","side","BackSide","ShaderMaterial","uniforms","envMap","value","backfaceMap","resolution","Background","useThree","viewport","aspect","texture","useLoader","TextureLoader","textureUrl","useMemo","minFilter","LinearFilter","adaptedHeight","width","height","adaptedWidth","layers","scale","attach","map","depthTest","Diamonds","size","gl","scene","camera","clock","model","useRef","gltf","GLTFLoader","diamondUrl","envFbo","WebGLRenderTarget","backfaceFbo","BackfaceMaterial","backfaceMaterial","refractionMaterial","dummy","Object3D","diamonds","Array","fill","_","i","position","Math","random","factor","direction","rotation","sin","PI","cos","useFrame","forEach","data","t","getElapsedTime","set","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","autoClear","setRenderTarget","render","material","clearDepth","ref","args","length","dispose","__$","geometry","App","fov","fallback","className","href","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0424b4ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/diamond.ab7b6e3a.glb\";","module.exports = __webpack_public_path__ + \"static/media/233.1600b9e7.jpg\";","import { ShaderMaterial, BackSide } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n","import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        vec4 worldPosition = modelMatrix * vec4( position, 1.0);\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize(worldPosition.xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      \n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      \n      float ior = 1.5;\n      float a = 0.33;\n      \n      vec3 fogColor = vec3(1.0);\n      vec3 reflectionColor = vec3(1.0);\n      \n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow( 1.08 + dot( viewDirection, worldNormal), 10.0 );\n      }\n      \n      void main() {\n        // screen coordinates\n        vec2 uv = gl_FragCoord.xy / resolution;\n      \n        // sample backface data from texture\n        vec3 backfaceNormal = texture2D(backfaceMap, uv).rgb;\n      \n        // combine backface and frontface normal\n        vec3 normal = worldNormal * (1.0 - a) - backfaceNormal * a;\n      \n        // calculate refraction and apply to uv\n        vec3 refracted = refract(viewDirection, normal, 1.0/ior);\n        uv += refracted.xy;\n      \n        // sample environment texture\n        vec4 tex = texture2D(envMap, uv);\n      \n        // calculate fresnel\n        float fresnel = fresnelFunc(viewDirection, normal);\n      \n        vec4 color = tex;\n      \n        // apply fresnel\n        color.rgb = mix(color.rgb, reflectionColor, fresnel);\n      \n        gl_FragColor = vec4(color.rgb, 1.0);\n      }`\n    })\n\n    this.uniforms = {\n      envMap: { value: options.envMap },\n      backfaceMap: { value: options.backfaceMap },\n      resolution: { value: options.resolution }\n    }\n  }\n}\n","import { TextureLoader, WebGLRenderTarget, Object3D, LinearFilter } from \"three\"\nimport React, { Suspense, useMemo, useRef } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Canvas, useLoader, useThree, useFrame } from \"react-three-fiber\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport BackfaceMaterial from \"./backface-material\"\nimport RefractionMaterial from \"./refraction-material\"\nimport diamondUrl from \"./assets/diamond.glb\"\nimport textureUrl from \"./assets/233.jpg\"\nimport \"./styles.css\"\n\nfunction Background() {\n  const { viewport, aspect } = useThree()\n  const texture = useLoader(TextureLoader, textureUrl)\n  useMemo(() => (texture.minFilter = LinearFilter), [])\n  // Calculates a plane filling the screen similar to background-size: cover\n  const adaptedHeight = 3800 * (aspect > 5000 / 3800 ? viewport.width / 5000 : viewport.height / 3800)\n  const adaptedWidth = 5000 * (aspect > 5000 / 3800 ? viewport.width / 5000 : viewport.height / 3800)\n  return (\n    <mesh layers={1} scale={[adaptedWidth, adaptedHeight, 1]}>\n      <planeBufferGeometry attach=\"geometry\" />\n      <meshBasicMaterial attach=\"material\" map={texture} depthTest={false} />\n    </mesh>\n  )\n}\n\nfunction Diamonds() {\n  const { size, viewport, gl, scene, camera, clock } = useThree()\n  const model = useRef()\n  const gltf = useLoader(GLTFLoader, diamondUrl)\n\n  // Create Fbo's and materials\n  const [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial] = useMemo(() => {\n    const envFbo = new WebGLRenderTarget(size.width, size.height)\n    const backfaceFbo = new WebGLRenderTarget(size.width, size.height)\n    const backfaceMaterial = new BackfaceMaterial()\n    const refractionMaterial = new RefractionMaterial({ envMap: envFbo.texture, backfaceMap: backfaceFbo.texture, resolution: [size.width, size.height] })\n    return [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial]\n  }, [size])\n\n  // Create random position data\n  const dummy = useMemo(() => new Object3D(), [])\n  const diamonds = useMemo(\n    () =>\n      new Array(80).fill().map((_, i) => ({\n        position: [i < 5 ? 0 : viewport.width / 2 - Math.random() * viewport.width, 40 - Math.random() * 40, i < 5 ? 26 : 10 - Math.random() * 20],\n        factor: 0.1 + Math.random(),\n        direction: Math.random() < 0.5 ? -1 : 1,\n        rotation: [Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI]\n      })),\n    []\n  )\n\n  // Render-loop\n  useFrame(() => {\n    // Update instanced diamonds\n    diamonds.forEach((data, i) => {\n      const t = clock.getElapsedTime()\n      data.position[1] -= (data.factor / 5) * data.direction\n      if (data.direction === 1 ? data.position[1] < -50 : data.position[1] > 50)\n        data.position = [i < 5 ? 0 : viewport.width / 2 - Math.random() * viewport.width, 50 * data.direction, data.position[2]]\n      const { position, rotation, factor } = data\n      dummy.position.set(position[0], position[1], position[2])\n      dummy.rotation.set(rotation[0] + t * factor, rotation[1] + t * factor, rotation[2] + t * factor)\n      dummy.scale.set(1 + factor, 1 + factor, 1 + factor)\n      dummy.updateMatrix()\n      model.current.setMatrixAt(i, dummy.matrix)\n    })\n    model.current.instanceMatrix.needsUpdate = true\n    // Render env to fbo\n    gl.autoClear = false\n    camera.layers.set(1)\n    gl.setRenderTarget(envFbo)\n    gl.render(scene, camera)\n    // Render cube backfaces to fbo\n    camera.layers.set(0)\n    model.current.material = backfaceMaterial\n    gl.setRenderTarget(backfaceFbo)\n    gl.clearDepth()\n    gl.render(scene, camera)\n    // Render env to screen\n    camera.layers.set(1)\n    gl.setRenderTarget(null)\n    gl.render(scene, camera)\n    gl.clearDepth()\n    // Render cube with refraction material to screen\n    camera.layers.set(0)\n    model.current.material = refractionMaterial\n    gl.render(scene, camera)\n  }, 1)\n\n  return (\n    <instancedMesh ref={model} args={[null, null, diamonds.length]}>\n      <bufferGeometry dispose={false} attach=\"geometry\" {...gltf.__$[1].geometry} />\n      <meshBasicMaterial attach=\"material\" />\n    </instancedMesh>\n  )\n}\n\nfunction App() {\n  return (\n    <>\n      <Canvas camera={{ fov: 50, position: [0, 0, 30] }}>\n        <Suspense fallback={null}>\n          <Background />\n          <Diamonds />\n        </Suspense>\n      </Canvas>\n      <div className=\"container\">\n        <h1>\n          <span>Carlos Noverón</span>\n        </h1>\n        <pre>\n          <h2>Crypto/Blockchain/DeFi/NFTs Engineer</h2>\n        </pre>\n      </div>\n      <a className=\"leftSideFooting\" href=\"https://github.com/drcmda/react-three-fiber\">\n        Github\n      </a>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}